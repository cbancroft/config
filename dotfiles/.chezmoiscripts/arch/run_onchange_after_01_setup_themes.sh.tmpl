{{- if eq .osid "linux-arch" -}}
#!/bin/bash

print_prompt() {
    [[ "${verbose}" == "false" ]] && return 0
    while (( "$#" )); do
        case "$1" in
            -r) echo -ne "\e[31m$2\e[0m"; shift 2 ;; # Red
            -g) echo -ne "\e[32m$2\e[0m"; shift 2 ;; # Green
            -y) echo -ne "\e[33m$2\e[0m"; shift 2 ;; # Yellow
            -b) echo -ne "\e[34m$2\e[0m"; shift 2 ;; # Blue
            -m) echo -ne "\e[35m$2\e[0m"; shift 2 ;; # Magenta
            -c) echo -ne "\e[36m$2\e[0m"; shift 2 ;; # Cyan
            -w) echo -ne "\e[37m$2\e[0m"; shift 2 ;; # White
            -n) echo -ne "\e[96m$2\e[0m"; shift 2 ;; # Neon
            *) echo -ne "$1"; shift ;;
        esac
    done
    echo ""
}

scrDir=$(builtin cd {{ .chezmoi.sourceDir }}/../scripts; pwd)
echo "Scriptdir: $scrDir. PWD: `pwd`.  Zero: $0. src-path: $(chezmoi source-path)"
themesDir=$(builtin cd {{ .chezmoi.sourceDir }}/../themes/wm; pwd)
confDir="${XDG_CONFIG_HOME:-$HOME/.config}"

verbose="${4}"
set +e

# error function
ask_help() {
cat << HELP
...Usage...
$(print_prompt "$0 " -y "Theme-Name " -c "/Path/to/Configs")
HELP
}

dcolDir="${confDir}/hyde/wallbash/Wall-Dcol"
[ ! -d "${dcolDir}" ] && print_prompt "[ERROR]" "${dcolDir} do not exist!" && exit 1

for theme in $themesDir/*; do
    Fav_Theme=$(basename "$theme")
    Theme_Dir="${theme}"

    print_prompt "Patching" -g " --// ${Fav_Theme} //-- "  "from " -b "${Theme_Dir}\n"
    Fav_Theme_Dir="${Theme_Dir}/Configs/.config/hyde/themes/${Fav_Theme}"
    [ ! -d "${Fav_Theme_Dir}" ] && print_prompt -r "[ERROR] " "'${Fav_Theme_Dir}'" -y " Do not Exist" && exit 1

    config=$(find "${dcolDir}" -type f -name "*.dcol" | awk -v favTheme="${Fav_Theme}" -F 'Wall-Dcol/' '{gsub(/\.dcol$/, ".theme"); print ".config/hyde/themes/" favTheme "/" $2}')
    restore_list=""

    echo "config: $config"
    while IFS= read -r fchk; do
        if [[ -e "${Theme_Dir}/Configs/${fchk}" ]]; then
            print_prompt -g "[OK] "  "${fchk}"
            fbase=$(basename "${fchk}")
            fdir=$(dirname "${fchk}")
            restore_list+="Y|Y|\${HOME}/${fdir}|${fbase}|hyprland\n"
        else
            print_prompt -y "[!!] " "${fchk} --> do not exist in ${Theme_Dir}/Configs/"
        fi
    done <<< "$config"

    # Get Wallpapers
    wallpapers=$(find "${Fav_Theme_Dir}" -type f \( -iname "*.gif" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \))
    wallcount="$(echo "${wallpapers}" | wc -l)"
    { [ -z "${wallpapers}" ] && print_prompt -r "[ERROR] " "No wallpapers found" && exit_flag=true ;} || {  print_prompt -g "\n[OK] " "wallpapers :: [count] ${wallcount} (.gif+.jpg+.jpeg+.png)" ;}

    # overparsing 😁
    check_tars() {
        local inVal="${1}"
        local gsLow=$(echo "${inVal}" | tr '[:upper:]' '[:lower:]')
        local gsVal="$(awk -F"[\"']" '/^[[:space:]]*exec[[:space:]]*=[[:space:]]*gsettings[[:space:]]*set[[:space:]]*org.gnome.desktop.interface[[:space:]]*'${gsLow}'-theme[[:space:]]*/ {last=$2} END {print last}' "${Fav_Theme_Dir}/hypr.theme" )"
        local trVal

        if [ ! -z "${gsVal}" ]; then
            print_prompt -g "[OK] " "hypr.theme :: [${gsLow}]" -b " ${gsVal}"
            trArc="$(find "${Theme_Dir}" -type f -name "${inVal}_*.tar.*")"
            [ -f "${trArc}" ] && [ $(echo "${trArc}" | wc -l) -eq 1 ] && trVal="$(basename "$(tar -tf "${trArc}" | cut -d '/' -f1 | sort -u)")" && trVal="$(echo "${trVal}" | grep -w "${gsVal}")"
            print_prompt -g "[OK] " "../*.tar.* :: [${gsLow}]" -b " ${trVal}"
            [ "${trVal}" != "${gsVal}" ] && print_prompt -r "[ERROR] " "${gsLow}-theme set in hypr.theme does not exist in ${inVal}_*.tar.*" && exit_flag=true
        else
            [ "${2}" == "--mandatory" ] && print_prompt -r "[ERROR] " "hypr.theme :: [${gsLow}] Not Found" && exit_flag=true && return 0
            print_prompt -y "[!!] " "hypr.theme :: [${gsLow}] Not Found"
        fi
    }

    check_tars Gtk --mandatory
    check_tars Icon
    check_tars Cursor
    print_prompt "" && [[ "${exit_flag}" = true ]] && exit 1

    # extract arcs
    prefix=("Gtk" "Icon" "Cursor")
    tgtDir=("$HOME/.themes" "$HOME/.icons" "$HOME/.icons")

    for indx in ${!prefix[@]}; do
        tarFile="$(find "${Theme_Dir}" -type f -name "${prefix[indx]}_*.tar.*")"
        [ -f "${tarFile}" ] || continue
        [ -d "${tgtDir[indx]}" ] || mkdir -p "${tgtDir[indx]}"
        tgtChk="$(basename "$(tar -tf "${tarFile}" | cut -d '/' -f1 | sort -u)")"
        [ -d "${tgtDir[indx]}/${tgtChk}" ] && print_prompt -y "[skip] " "\"${tgtDir[indx]}/${tgtChk}\" already exists" && continue
        print_prompt -g "[extracting] " "${tarFile} --> ${tgtDir[indx]}"
        tar -xf "${tarFile}" -C "${tgtDir[indx]}"
    done

    # populate wallpaper
    Fav_Theme_Walls="${confDir}/hyde/themes/${Fav_Theme}/wallpapers"
    [ ! -d "${Fav_Theme_Walls}" ] && mkdir -p "${Fav_Theme_Walls}"
    while IFS= read -r walls; do
        cp -f "${walls}" "${Fav_Theme_Walls}"
    done <<< "${wallpapers}"

    # restore configs with theme override
    echo -en "${restore_list}" > "${Theme_Dir}/restore_cfg.lst"
    print_prompt -g "\n[exec] " "restore_cfg.sh \"${Theme_Dir}/restore_cfg.lst\" \"${Theme_Dir}/Configs\" \"${Fav_Theme}\"\n"
    "${scrDir}/restore_cfg.sh" "${Theme_Dir}/restore_cfg.lst" "${Theme_Dir}/Configs" "${Fav_Theme}" &> /dev/null
    unset restore_list
done

# Generate wallpaper cache
~/bin/swwwallcache.sh -t ""
{{ end -}}

